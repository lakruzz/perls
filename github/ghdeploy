#!/usr/bin/perl
require 5.14.0;
use strict;                # http://perldoc.perl.org/strict.html
use Carp;                  # http://perldoc.perl.org/Carp.html
use Cwd;                   # http://perldoc.perl.org/Cwd.html
use Data::Dumper;          # https://perldoc.perl.org/Data/Dumper.html
use JSON::PP;              # http://search.cpan.org/~makamaka/JSON-PP-2.27400/lib/JSON/PP.pm Included in perl cores since 5.14



# File version
our $VERSION    = "1.0";                             #major.minor
our $PATCH      = "0";                               #patch

use Getopt::Long;          # http://perldoc.perl.org/Getopt/Long.html
use Pod::Usage;            # http://perldoc.perl.org/Pod/Usage.html
use File::Basename;        # http://perldoc.perl.org/File/Basename.html

# Assume local modules are in sub folders relative to this script
use lib dirname(__FILE__);

# Holds the global variables that are used to cache the value of our options
our %Options;

# Set default
$Options{verbose} = 0;
$Options{dryrun}  = 0;
$Options{force}   = 0;

GetOptions(
  (
  	"token=s"              => \$Options{token},
		"verbose!"             => \$Options{verbose},
		"force!"               => \$Options{force},
		"dryrun!"              => \$Options{dryrun},
		"help"                 => sub { pod2usage(-exitval => 0, -verbose => 1) },
    "man"                  => sub { pod2usage(-exitval => 0, -verbose => 3) }
	)
) || pod2usage(-exitval => 1, -verbose => 0);

defined( $Options{token} ) || pod2usage(
	-exitval => 1,
	-verbose => 0,
	-message => "--token is required");

#########  Main program  ########################

$Options{verbose} && print (
  Dumper(\%Options) =~
  s/\$VAR1/\%Options/r =~
  s/('token'.*=>.*)'.*'/$1 'NOT SHOWN'/gr);

exit(0);

#########  Functions  ###########################

# Below is all the POD documentation following the conventional chapters
# as described in (http://perldoc.perl.org/perlpod.html).

=pod

=head1 NAME

GitHub Pages Deploy - Deploys your static HTML site to GitHub

=head1 SYNOPSIS

  ghdeploy --token GHTOKEN --source DIR --target GHREPO [--[no]force ][--verbose]
  ghdeploy --help | --man

=head1 OPTIONS

=head2 REQUIRED

  --token GHTOKEN    GitHub token, must authorize push to repository
  --source DIR       Directory to push to GitHub
  --target GHREPO    Repository to push to, format is: user/repo

=head2 OPTIONAL (default)

  --[no]force        Use force in the push (--noforce)
  --[no]verbose      Prints commands before execution (--noverbose)

=head2 Pro tip

Options can be applied with double or single dashes as you like, so both
C<--verbose> and C<-verbose> are valid. You can even abbreveate the option name,
 it will remain valid as long as it's unique among all options.

B<Example:> since there are no other options except C<--verbose> that begins with
'v' it means that even C<-v> is valid.

=head1 DESCRIPTION

B<Copyright>

Lars Kruse, 2018, L<www.lakruzz.com|http://www.lakruzz.com>

B<License>

GPL v3.0

B<Repository>

L<github.com/lakruzz/perls|http://github.com/lakruzz/perls>

B<Support and feeback>

Use the L<issues|http://github.com/lakruzz/perls/issues> in the repo.

=cut

sub cmd ($) {
# Safe execution of shell commands
# Input is a hash containing the options and parameters to execute:
#
# command      [requied]      The command to execute
# die_on_err   [optional=1]   When set to true, the program will terminate,
#                             using croak, if the command execution returns
#                             a non-zero value.
# verbose      [optional=0]   When true, the command will be typed to STDOUT
#                             just prior to execution.
# return_array [optional=0]   When true result returns an array, false returns
#                             scalar.
# merge_errout [optional=1]   True merges ERROUT into STDOUT, false returns only
#                             STDOUT, ERROUT is unhandled (still prints)
#
# The example below executes 'git push' in verbose mode, and continues even if
# it fails - The return code is (as always) available from $?
#
#my $res =	cmd(
#		command => 'git push',
#		verbose => $Options{verbose},
#   die_on_error => 0 );

    my %opt = @_;
    croak "input parameter for key 'command' required" unless ( $opt{command} );

    # Deal with defaults if unset
		defined( $opt{command} )     ||  do { croak "input parameter for key 'command' required" };
    defined( $opt{die_on_err} )   ||  do {$opt{die_on_err}   = 1};
		defined( $opt{merge_errout} ) ||  do {$opt{merge_errout} = 1};
		defined( $opt{verbose} )      ||  do {$opt{verbose}      = 1};
		defined( $opt{return_array} ) ||  do {$opt{return_array} = 0};

    #merge_errout
		my $cmd = ( $opt{merge_output} )? $opt{command} . ' 2>&1' : $opt{command};

    # verbose
		$opt{verbose} && print $opt{command}."\n";
    my @res = qx($cmd);

    # die_on_err
    if ( $opt{die_on_err} ) {
        if ($?) {
            croak "Execution of [$cmd] returned a non-zero value (".( ($?) / 256 ).")";
        }
    };

		#return_array
    return ( $opt{return_array} ) ? @res : join( '', @res );

}

__END__
